# This file is part of Extractor_Markup.

# Extractor_Markup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Extractor_Markup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Extractor_Markup.  If not, see <http://www.gnu.org/licenses/>.

# see link below for make file dependency magic
#
# http://bruno.defraine.net/techtips/makefile-auto-dependencies-with-gcc/
#
MAKE=gmake

BOOSTDIR := /extra/boost/boost-1.88_gcc-15
# GCCDIR := 
GCCDIR := /extra/gcc/gcc-15
GTESTDIR := /usr/local/include
UTILITYDIR := ${HOME}/projects/PF_Project/common_utilities
CPP := $(GCCDIR)/bin/g++
GCC := $(GCCDIR)/bin/gcc

# If no configuration is specified, "Debug" will be used
ifndef "CFG"
	CFG := Debug
endif

#	common definitions

OUTFILE := libPF_Chart.a

CFG_INC := -I${HOME}/projects/PF_Project/point_figure/src \
	-I$(GTESTDIR) \
	-isystem$(BOOSTDIR) \
	-I$(UTILITYDIR)/include 

# SDIR1 := .
# SRCS1 := $(SDIR1)/Main.cpp

SDIR2 := ../point_figure/src
SRCS2 := $(SDIR2)/Boxes.cpp \
		$(SDIR2)/PF_Column.cpp \
		$(SDIR2)/PF_Chart.cpp \
		$(SDIR2)/PointAndFigureDB.cpp \
		$(SDIR2)/PF_Signals.cpp 


SDIR4 := $(UTILITYDIR)/src
SRCS4 := $(SDIR4)/utilities.cpp \
		 $(SDIR4)/calfaq.c

SRCS := $(SRCS2) $(SRCS4)

VPATH := $(SDIR2):$(SDIR4)

OBJS2=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS2)))))
OBJS4=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS4)))))

OBJS=$(OBJS2) $(OBJS4)

DEPS=$(OBJS:.o=.d)

#
# Configuration: Debug
#
ifeq "$(CFG)" "Debug"

OUTDIR=Debug_lib

COMPILE=$(CPP) -c  -x c++  -O0  -g3 -std=c++26 -D_DEBUG -DBOOST_ENABLE_ASSERT_HANDLER -DSPDLOG_USE_STD_FORMAT -DUSE_OS_TZDB -DSHOW_STRACE -fPIC -o $@ $(CFG_INC) $< -march=native -mtune=native -MMD -MP
CCOMPILE=$(GCC) -c  -O0  -g3 -D_DEBUG -fPIC -o $@ $(CFG_INC) $< -march=native -mtune=native -MMD -MP

LINK=ar -rs  "$(OUTFILE)" $(OBJS)

endif #	DEBUG configuration

#
# Configuration: Release
#
ifeq "$(CFG)" "Release"

OUTDIR=Release_lib

COMPILE=$(CPP) -c  -x c++  -O3 -std=c++26 -flto -DBOOST_ENABLE_ASSERT_HANDLER -DSPDLOG_USE_STD_FORMAT -DUSE_OS_TZDB -fPIC -o $@ $(CFG_INC) $< -march=native -mtune=native -MMD -MP
# COMPILE=$(CPP) -c  -x c++  -O3 -std=c++2b -DBOOST_ENABLE_ASSERT_HANDLER -DBOOST_REGEX_STANDALONE -DSPDLOG_USE_STD_FORMAT -DUSE_OS_TZDB -fPIC -o $@ $(CFG_INC) $< -march=native -MMD -MP
CCOMPILE=$(GCC) -c  -O3 -flto -fPIC -o $@ $(CFG_INC) $< -march=native -mtune=native -MMD -MP

LINK=ar -flto=auto -rs  "$(OUTFILE)" $(OBJS)
# LINK=ar -rs  "$(OUTFILE)" $(OBJS)

endif #	RELEASE configuration

# Build rules
all: $(OUTFILE)

$(OUTDIR)/%.o : %.cpp 
	$(COMPILE)

$(OUTDIR)/%.o : %.c
	$(CCOMPILE)

$(OUTFILE): $(OUTDIR) $(OBJS2) $(OBJS4)
	$(LINK)

-include $(DEPS)

$(OUTDIR):
	mkdir -p "$(OUTDIR)"

# Rebuild this project
rebuild: cleanall all

# Clean this project
clean:
	rm -f $(OUTFILE)
	rm -f $(OBJS)
	rm -f $(OUTDIR)/*.d
	rm -f $(OUTDIR)/*.o

# Clean this project and all dependencies
cleanall: clean
