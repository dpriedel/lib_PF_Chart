# This file is part of Extractor_Markup.

# Extractor_Markup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Extractor_Markup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Extractor_Markup.  If not, see <http://www.gnu.org/licenses/>.

# see link below for make file dependency magic
#
# http://bruno.defraine.net/techtips/makefile-auto-dependencies-with-gcc/
#
MAKE=gmake

BOOSTDIR := /extra/boost/boost-1.82_gcc-13
GCCDIR := /extra/gcc/gcc-13
GTESTDIR := /usr/local/include
UTILITYDIR := ${HOME}/projects/PF_Project/common_utilities
CPP := $(GCCDIR)/bin/g++
GCC := $(GCCDIR)/bin/gcc

# If no configuration is specified, "Debug" will be used
ifndef "CFG"
	CFG := Debug
endif

#	common definitions

OUTFILE := PF_CollectData

CFG_INC := -I${HOME}/projects/PF_Project/point_figure/src \
	-I$(GTESTDIR) \
	-I$(BOOSTDIR) \
	-I$(UTILITYDIR)/include \
	-I/usr/include/python3.11 \
	-I/usr/lib/python3.11/site-packages/pybind11/include

RPATH_LIB := -Wl,-rpath,$(GCCDIR)/lib64 -Wl,-rpath,$(BOOSTDIR)/lib -Wl,-rpath,/usr/local/lib

SDIR1 := .
SRCS1 := $(SDIR1)/Main.cpp

SDIR2 := ./src
SRCS2 := $(SDIR2)/PF_CollectDataApp.cpp \
		$(SDIR2)/Boxes.cpp \
		$(SDIR2)/PF_Column.cpp \
		$(SDIR2)/PF_Chart.cpp \
		$(SDIR2)/ConstructChartGraphic.cpp \
		$(SDIR2)/PointAndFigureDB.cpp \
		$(SDIR2)/PF_Signals.cpp  \
		$(SDIR2)/Tiingo.cpp #\


SDIR4 := $(UTILITYDIR)/src
SRCS4 := $(SDIR4)/utilities.cpp \
		 $(SDIR4)/calfaq.c

SRCS := $(SRCS1) $(SRCS2) $(SRCS4)

VPATH := $(SDIR1):$(SDIR2):$(SDIR4)

CFG_LIB := -L/usr/local/lib \
		-ldate-tz \
		-lspdlog \
		-lpqxx \
		-lpq \
		-L/usr/lib \
		-lfmt \
		-lmpdec++ \
		-lmpdec \
		-lcrypt \
		-lpthread \
		-lssl -lcrypto \
		-ljsoncpp \
		-ldl -lutil -lm -lm \
		-lpython3.11 \
		-L$(GCCDIR)/lib64 \
		-L$(BOOSTDIR)/lib \
		-lboost_program_options-mt-x64 

OBJS1=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS1)))))
OBJS2=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS2)))))
OBJS4=$(addprefix $(OUTDIR)/, $(addsuffix .o, $(basename $(notdir $(SRCS4)))))

OBJS=$(OBJS1) $(OBJS2) $(OBJS4)

DEPS=$(OBJS:.o=.d)

#
# Configuration: Debug
#
ifeq "$(CFG)" "Debug"

OUTDIR=Debug_collect

COMPILE=$(CPP) -c  -x c++  -O0  -g3 -std=c++2b -D_DEBUG -DBOOST_ENABLE_ASSERT_HANDLER -DBOOST_REGEX_STANDALONE -DSPDLOG_USE_STD_FORMAT -DUSE_OS_TZDB -fPIC -o $@ $(CFG_INC) $< -march=native -MMD -MP
CCOMPILE=$(GCC) -c  -O0  -g3 -D_DEBUG -fPIC -o $@ $(CFG_INC) $< -march=native -MMD -MP

LINK := $(CPP)  -g -o $(OUTFILE) $(OBJS) $(CFG_LIB) -Wl,-E $(RPATH_LIB)

endif #	DEBUG configuration

#
# Configuration: Release
#
ifeq "$(CFG)" "Release"

OUTDIR=Release

COMPILE=$(CPP) -c  -x c++  -O3 -std=c++2b -flto -DBOOST_ENABLE_ASSERT_HANDLER -DBOOST_REGEX_STANDALONE -DSPDLOG_USE_STD_FORMAT -DUSE_OS_TZDB -fPIC -o $@ $(CFG_INC) $< -march=native -MMD -MP
CCOMPILE=$(GCC) -c  -O3  -fPIC -o $@ $(CFG_INC) $< -march=native -MMD -MP

LINK := $(CPP) -flto=auto -o $(OUTFILE) $(OBJS) $(CFG_LIB) -Wl,-E $(RPATH_LIB)

endif #	RELEASE configuration

# Build rules
all: $(OUTFILE)

$(OUTDIR)/%.o : %.cpp 
	$(COMPILE)

$(OUTDIR)/%.o : %.c
	$(CCOMPILE)

$(OUTFILE): $(OUTDIR) $(OBJS1) $(OBJS2) $(OBJS4)
	$(LINK)

-include $(DEPS)

$(OUTDIR):
	mkdir -p "$(OUTDIR)"

# Rebuild this project
rebuild: cleanall all

# Clean this project
clean:
	rm -f $(OUTFILE)
	rm -f $(OBJS)
	rm -f $(OUTDIR)/*.d
	rm -f $(OUTDIR)/*.o

# Clean this project and all dependencies
cleanall: clean
